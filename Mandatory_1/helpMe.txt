• Matter.Engine =  module contains methods for creating and manipulating engines. An engine is a controller that manages
    updating the simulation of the world.
    -   .create([options]) - Creates a new engine. If not given any [options], all values will be set as default. They are
        calculated using some variables.

• Matter.World = module contains methods for creating and manipulating world composite. A Matter.World is Matter.Composite 
    body, which is a collection of: Matter.Body, Matter Constraint and other Matter.Composite.
    -  .add(world, object) 
    Or if we have multiple objects we want to add to the world:
    -  .add(world, [object1, object2, object3])

• Matter.Render = module is a simple HTML5 canvas based renderer for visualizing instances of Matter.Engine. It is intended 
    for development and debugging purposes, but may also be suitable for simple games. It includes a number of drawing options.
    -   .create([options]) = creates a new renderer. The options paratemeter is an object that specifies any properties you wish
        to override the defaults. 

• Matter.Bodies = module that contains factory methods for creating rigid body models with commonly, 
    used body configurations (rectangles, circles and other polygons).
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•